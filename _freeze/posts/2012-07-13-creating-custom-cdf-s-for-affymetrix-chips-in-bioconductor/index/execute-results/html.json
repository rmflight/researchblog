{
  "hash": "d367af46c7f31a49186d3197a33ef563",
  "result": {
    "markdown": "---\ntitle: \"Creating Custom CDFs for Affymetrix Chips in Bioconductor\"\ndate: 2012-07-13\nsubtitle: |\n  Examples of messing with Affymetrix CDF data in Bioconductor.\ncategories: [R, bioconductor, bioinformatics, cdf, affymetrix, microarray, random-code-snippets]\n---\n\n::: {.cell}\n\n:::\n\n\n## What?\n\nFor those who don't know, **CDF** files are chip definition format files that define which probes on an Affymetrix microarray chip belong together, and are necessary to use any of the standard summarization methods such as **RMA**, and others.\n\n## Why?\n\nBecause we can, and because custom definitions have been shown to be quite useful. See the information over at [Brainarray][linkBrain].\n\n## Why not somewhere else?\n\nA lot of times other people create custom **CDF** files based on their own criteria, and make it subsequently available for others to use (see the [Brainarray][linkBrain] for an example of what some are doing, as well as [PlandbAffy][linkplandb]) \n\n\nYou have a really nifty idea for a way to reorganize the probesets on an Affymetrix chip to perform a custom analysis, but you don't want to go to the trouble of actually creating the CDF files and Bioconductor packages normally required to do the analysis, and yet you want to test and develop your analysis method.\n\n## How?\n\nIt turns out you are in luck. At least for **AffyBatch** objects in Bioconductor (created by calling **ReadAffy**), the **CDF** information is stored as an attached environment that can be easily hacked and modified to your hearts content. Environments in R are quite important and useful, and I wouldn't have come up with this if I hadn't been working in R for the past couple of years, but figured someone else might benefit from this knowledge.\n\n## The environment\n\nIn R, one can access an environment like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget(\"objName\", envName) # get the value of object in the environment\nls(envName)\n```\n:::\n\n\nWhat is also very cool, is that one can extract the objects in an environment to a list, and also create their own environment from a list using `list2env`. Using this methodology, we can create our own definition of probesets that can be used by standard Bioconductor routines to summarize the probes into probesets.\n\nA couple of disclaimers:  \n\n* I have only tried this on 3' expression arrays\n* There might be a better way to do this, but I couldn't find it (let me know in the comments)\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(affy)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: affy\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: BiocGenerics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'BiocGenerics'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, append, as.data.frame, basename, cbind, colnames,\n    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,\n    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,\n    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,\n    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,\n    union, unique, unsplit, which.max, which.min\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Biobase\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n```\n:::\n\n```{.r .cell-code}\nrequire(estrogen)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: estrogen\n```\n:::\n\n```{.r .cell-code}\nrequire(hgu95av2cdf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: hgu95av2cdf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: replacing previous import 'AnnotationDbi::tail' by 'utils::tail' when\nloading 'hgu95av2cdf'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: replacing previous import 'AnnotationDbi::head' by 'utils::head' when\nloading 'hgu95av2cdf'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n```{.r .cell-code}\ndatadir = system.file(\"extdata\", package=\"estrogen\")\n\npd = read.AnnotatedDataFrame(file.path(datadir, \"estrogen.txt\"), header=TRUE, sep=\"\", row.names=1)\npData(pd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             estrogen time.h\nlow10-1.cel    absent     10\nlow10-2.cel    absent     10\nhigh10-1.cel  present     10\nhigh10-2.cel  present     10\nlow48-1.cel    absent     48\nlow48-2.cel    absent     48\nhigh48-1.cel  present     48\nhigh48-2.cel  present     48\n```\n:::\n\n```{.r .cell-code}\ncelDat = ReadAffy(filenames = rownames(pData(pd)), \n                  phenoData = pd,\n                  verbose=TRUE, celfile.path=datadir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 reading /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/low10-1.cel ...instantiating an AffyBatch (intensity a 409600x8 matrix)...done.\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/low10-1.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/low10-2.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/high10-1.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/high10-2.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/low48-1.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/low48-2.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/high48-1.cel\nReading in : /home/rmflight/Projects/personal/researchblog_quarto/renv/library/R-4.2/x86_64-pc-linux-gnu/estrogen/extdata/high48-2.cel\n```\n:::\n:::\n\n\nThis loads up the data, reads in the raw data, and gets it ready for us to use. Now, lets see what is in the actual **CDF** environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntopProbes <- head(ls(hgu95av2cdf)) # get a list of probesets\ntopProbes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"100_g_at\"  \"1000_at\"   \"1001_at\"   \"1002_f_at\" \"1003_s_at\" \"1004_at\"  \n```\n:::\n\n```{.r .cell-code}\nexSet <- get(topProbes[1], hgu95av2cdf)\nexSet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          pm     mm\n [1,] 175218 175858\n [2,] 356689 357329\n [3,] 227696 228336\n [4,] 237919 238559\n [5,] 275173 275813\n [6,] 203444 204084\n [7,] 357984 358624\n [8,] 368524 369164\n [9,] 285352 285992\n[10,] 304510 305150\n[11,] 159937 160577\n[12,] 223929 224569\n[13,] 282764 283404\n[14,] 270003 270643\n[15,] 303343 303983\n[16,] 389048 389688\n```\n:::\n:::\n\n\nWe can see here that the first probe set 100_g_at has 16 perfect-match and mis-match probes in associated with it. \n\nLets summarize the original data using RMA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrma1 <- exprs(rma(celDat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackground correcting\nNormalizing\nCalculating Expression\n```\n:::\n\n```{.r .cell-code}\nhead(rma1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          low10-1.cel low10-2.cel high10-1.cel high10-2.cel low48-1.cel\n100_g_at     9.642896    9.741496     9.537036     9.353625    9.591697\n1000_at     10.398169   10.254362    10.003971     9.903528   10.374866\n1001_at      5.717613    5.881008     5.859563     5.954028    5.960540\n1002_f_at    5.512596    5.801807     5.571065     5.608132    5.390064\n1003_s_at    7.783927    8.007975     8.037999     7.835120    7.926487\n1004_at      7.289162    7.603670     7.488539     7.771506    7.521789\n          low48-2.cel high48-1.cel high48-2.cel\n100_g_at     9.570590     9.475796     9.530655\n1000_at     10.033520    10.345066     9.863321\n1001_at      6.020889     5.981080     6.285192\n1002_f_at    5.494511     5.508104     5.630107\n1003_s_at    8.138870     7.994937     8.233338\n1004_at      7.599544     7.456149     7.675171\n```\n:::\n:::\n\n\nNow lets get the data as a list, and then create a new environment to be used for summarization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallSets <- ls(hgu95av2cdf)\nallSetDat <- mget(allSets, hgu95av2cdf)\n\nallSetDat[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`100_g_at`\n          pm     mm\n [1,] 175218 175858\n [2,] 356689 357329\n [3,] 227696 228336\n [4,] 237919 238559\n [5,] 275173 275813\n [6,] 203444 204084\n [7,] 357984 358624\n [8,] 368524 369164\n [9,] 285352 285992\n[10,] 304510 305150\n[11,] 159937 160577\n[12,] 223929 224569\n[13,] 282764 283404\n[14,] 270003 270643\n[15,] 303343 303983\n[16,] 389048 389688\n```\n:::\n\n```{.r .cell-code}\nhgu2 <- list2env(allSetDat)\ncelDat@cdfName <- \"hgu2\"\n\nrma2 <- exprs(rma(celDat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackground correcting\nNormalizing\nCalculating Expression\n```\n:::\n\n```{.r .cell-code}\nhead(rma2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          low10-1.cel low10-2.cel high10-1.cel high10-2.cel low48-1.cel\n100_g_at     9.642896    9.741496     9.537036     9.353625    9.591697\n1000_at     10.398169   10.254362    10.003971     9.903528   10.374866\n1001_at      5.717613    5.881008     5.859563     5.954028    5.960540\n1002_f_at    5.512596    5.801807     5.571065     5.608132    5.390064\n1003_s_at    7.783927    8.007975     8.037999     7.835120    7.926487\n1004_at      7.289162    7.603670     7.488539     7.771506    7.521789\n          low48-2.cel high48-1.cel high48-2.cel\n100_g_at     9.570590     9.475796     9.530655\n1000_at     10.033520    10.345066     9.863321\n1001_at      6.020889     5.981080     6.285192\n1002_f_at    5.494511     5.508104     5.630107\n1003_s_at    8.138870     7.994937     8.233338\n1004_at      7.599544     7.456149     7.675171\n```\n:::\n:::\n\n\nWhat about removing the **MM** columns? RMA only uses the **PM**, so it should still work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallSetDat <- lapply(allSetDat, function(x){\n  x[,1, drop=F]\n})\n\nallSetDat[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`100_g_at`\n          pm\n [1,] 175218\n [2,] 356689\n [3,] 227696\n [4,] 237919\n [5,] 275173\n [6,] 203444\n [7,] 357984\n [8,] 368524\n [9,] 285352\n[10,] 304510\n[11,] 159937\n[12,] 223929\n[13,] 282764\n[14,] 270003\n[15,] 303343\n[16,] 389048\n```\n:::\n\n```{.r .cell-code}\nhgu3 <- list2env(allSetDat)\ncelDat@cdfName <- \"hgu3\"\nrma3 <-exprs(rma(celDat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackground correcting\nNormalizing\nCalculating Expression\n```\n:::\n\n```{.r .cell-code}\nhead(rma3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          low10-1.cel low10-2.cel high10-1.cel high10-2.cel low48-1.cel\n100_g_at     9.642896    9.741496     9.537036     9.353625    9.591697\n1000_at     10.398169   10.254362    10.003971     9.903528   10.374866\n1001_at      5.717613    5.881008     5.859563     5.954028    5.960540\n1002_f_at    5.512596    5.801807     5.571065     5.608132    5.390064\n1003_s_at    7.783927    8.007975     8.037999     7.835120    7.926487\n1004_at      7.289162    7.603670     7.488539     7.771506    7.521789\n          low48-2.cel high48-1.cel high48-2.cel\n100_g_at     9.570590     9.475796     9.530655\n1000_at     10.033520    10.345066     9.863321\n1001_at      6.020889     5.981080     6.285192\n1002_f_at    5.494511     5.508104     5.630107\n1003_s_at    8.138870     7.994937     8.233338\n1004_at      7.599544     7.456149     7.675171\n```\n:::\n:::\n\n\nWhat if we only want to use the first 5 probesets?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallSetDat <- allSetDat[1:5]\nhgu4 <- list2env(allSetDat)\ncelDat@cdfName <- \"hgu4\"\ncelDat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAffyBatch object\nsize of arrays=640x640 features (22 kb)\ncdf=hgu4 (5 affyids)\nnumber of samples=8\nnumber of genes=5\nannotation=hgu95av2\nnotes=\n```\n:::\n\n```{.r .cell-code}\nrma4 <- exprs(rma(celDat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackground correcting\nNormalizing\nCalculating Expression\n```\n:::\n\n```{.r .cell-code}\nrma4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          low10-1.cel low10-2.cel high10-1.cel high10-2.cel low48-1.cel\n100_g_at     9.463007    9.554665     9.449050     9.401976    9.447562\n1000_at     10.182753   10.009785    10.009785     9.970396   10.102424\n1001_at      5.943840    6.005177     5.944015     6.089531    6.237329\n1002_f_at    5.787166    5.846225     5.816964     5.814798    5.763175\n1003_s_at    7.750877    7.769401     7.913021     7.864052    7.860778\n          low48-2.cel high48-1.cel high48-2.cel\n100_g_at     9.457986     9.401366     9.431078\n1000_at     10.009785    10.197065     9.889555\n1001_at      6.147957     6.189200     6.206669\n1002_f_at    5.763175     5.740757     5.755085\n1003_s_at    7.917565     7.862614     7.928691\n```\n:::\n\n```{.r .cell-code}\ndim(rma4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 8\n```\n:::\n:::\n\n\n## Custom CDF\n\nTo generate our custom CDF, we are going to set our own names, and take random probes from all of the probes on the chip. The actual criteria of which probes should be together can be made using any method the author chooses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaxIndx <- 640*640\n\ncustomCDF <- lapply(seq(1,100), function(x){\n  tmp <- matrix(sample(maxIndx, 20), nrow=20, ncol=1)\n  colnames(tmp) <- \"pm\"\n  return(tmp)\n})\n\nnames(customCDF) <- seq(1, 100)\n\nhgu5 <- list2env(customCDF)\ncelDat@cdfName <- \"hgu5\"\nrma5 <- exprs(rma(celDat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackground correcting\nNormalizing\nCalculating Expression\n```\n:::\n\n```{.r .cell-code}\nhead(rma5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    low10-1.cel low10-2.cel high10-1.cel high10-2.cel low48-1.cel low48-2.cel\n1      6.805156    6.993719     6.899264     6.932725    6.928347    6.957158\n10     6.441884    6.319232     6.297822     6.198441    6.274462    6.419477\n100    5.700887    5.712753     5.618964     5.717375    5.824081    5.741998\n11     5.243884    5.204840     5.156431     5.149247    5.455638    5.249618\n12     6.790776    6.660627     6.718511     6.576265    6.828149    7.009592\n13     5.666141    5.752682     5.697687     5.696507    5.622639    5.778334\n    high48-1.cel high48-2.cel\n1       6.915275     6.836921\n10      6.204771     5.928888\n100     5.944784     5.899380\n11      5.284089     5.298048\n12      6.744098     6.714799\n13      5.660630     5.666974\n```\n:::\n:::\n\n\nI hope this information is useful to someone else. I know it made my life a lot easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Pop!_OS 22.04 LTS\n\nMatrix products: default\nBLAS:   /rmflight_stuff/software/R-4.2.1/lib/libRblas.so\nLAPACK: /rmflight_stuff/software/R-4.2.1/lib/libRlapack.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] hgu95av2cdf_2.18.0  estrogen_1.42.0     affy_1.74.0        \n[4] Biobase_2.56.0      BiocGenerics_0.42.0\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9             XVector_0.36.0         GenomeInfoDb_1.32.4   \n [4] compiler_4.2.1         BiocManager_1.30.19    bitops_1.0-7          \n [7] tools_4.2.1            zlibbioc_1.42.0        digest_0.6.29         \n[10] bit_4.0.4              jsonlite_1.8.0         evaluate_0.16         \n[13] RSQLite_2.2.19         memoise_2.0.1          preprocessCore_1.58.0 \n[16] png_0.1-7              rlang_1.0.5            cli_3.4.0             \n[19] DBI_1.1.3              rstudioapi_0.14        yaml_2.3.5            \n[22] xfun_0.33              fastmap_1.1.0          GenomeInfoDbData_1.2.8\n[25] httr_1.4.4             stringr_1.4.1          knitr_1.40            \n[28] Biostrings_2.64.1      IRanges_2.30.1         S4Vectors_0.34.0      \n[31] htmlwidgets_1.5.4      vctrs_0.4.1            stats4_4.2.1          \n[34] bit64_4.0.5            R6_2.5.1               AnnotationDbi_1.58.0  \n[37] rmarkdown_2.16         blob_1.2.3             magrittr_2.0.3        \n[40] htmltools_0.5.3        KEGGREST_1.36.3        renv_0.15.5           \n[43] stringi_1.7.8          RCurl_1.98-1.8         cachem_1.0.6          \n[46] crayon_1.5.1           affyio_1.66.0         \n```\n:::\n:::\n\n\nOriginally published 2013/07/13, moved to http://rmflight.github.io on 2013/12/04.\n\n[linkBrain]: http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/genomic_curated_CDF.asp\n[linkplandb]: http://affymetrix2.bioinf.fbb.msu.ru/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}