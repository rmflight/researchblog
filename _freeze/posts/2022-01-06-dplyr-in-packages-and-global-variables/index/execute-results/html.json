{
  "hash": "d4c0102462f951cff4f336e87c9250cb",
  "result": {
    "markdown": "---\ntitle: \"Dplyr in Packages and Global Variables\"\nsubtitle: |\n  How to include dplyr in a package, and avoid warnings around global variables.\ndate: 2022-01-06\ncategories: [random-code-snippets, packages, dplyr, rlang, R, development]\nbibliography: refs.bib\n---\n\n\n\n\nI was recently cleaning up a development package so it would actually pass checks so it could be hosted on our labs new r-universe [@moseleyruniverse], and was getting warnings about global variables due to using `{dplyr}` operations, without {enquoting} variables.\n\nThere are a few approaches to handling this.\n\n1. Using {utils::globalvariables} in an R file somewhere.\n1. Using {rlang::.data} and importing it into the package.\n\nI went with option **2**, see [@nobindingsolution].\n\nIn the original version of `{dplyr}` and other packages like {ggplot2}, there was an option to use \"string\" arguments, normally by calling the {*_str} or {*_} version of a function name.\n\nThat has gone out of fashion, and the way to do it now is to use the .data pronoun [@dplyrvignette].\n\nSo now the code looks like this:\n\n```r\n# an example filtering operation\ndplyr::filter(.data$varname == \"value\")\n```\n\nThe easiest way to include this correctly in your package, is by importing the {rlang::.data}.\n\n```r\n#' @importFrom rlang .data\n```\n\nAnd all the warnings should go away during package checking.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}