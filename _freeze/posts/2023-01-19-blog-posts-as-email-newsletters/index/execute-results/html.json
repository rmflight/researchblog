{
  "hash": "9e0af8cfb1434df80015835f9e2eccd1",
  "result": {
    "markdown": "---\ntitle: \"Blog Posts as Email Newsletters\"\nsubtitle: |\n  With the new blog2newsletter, you can have email subscribers to your blog controlled\n  by R thanks to gmailr, googlesheets4, and tidyRSS.\ndate: 2023-01-19\ncategories: [R, newsletters]\neditor_options: \n  chunk_output_type: console\nbibliography: refs.bib\n---\n\n\n\n\n## TL;DR\n\nWant to be able to have people subscribe to your blog via email?\nCheck out the `{blog2newsletter}` package on GitHub [@blog2newsletter].\n\n## A Newsletter? Really?\n\nOK, so hear me out.\nFor some reason, if a newsletter shows up in my email inbox, I'm much more likely to read it.\nFor example, I subscribe to Bob Rudis awesome Daily Drops [@dailydrop], and they almost always get read right when they come in.\nLet's be honest, SubStack has definitely made email newsletters popular.\nHowever, while I'm interested in making my blog available to people in other ways, I'm not going to use something like SubStack's platform to do it (Bob Rudis has frequently complained about the formatting options in the SubStack editor, for instance).\n\n## The Power of R to the Rescue!\n\nNow, I'll admit, Google is another \"platform\", but it's one with a well known and documented API, with awesome R packages to interact with the APIs.\nFor example, `{gmailr}` lets us compose, draft, and send emails from our GMail accounts [@gmailr].\n`{googlesheets4}` provides access to Google Sheets, like those used to store reponses to Google Forms [@googlesheets4].\n\nWith these packages, we can cobble together another package that provides functions to send blog posts as email newsletters!\nAnd thus my holiday break project was born!\n\nCaveats, I don't know the API limits for GMail, but I'm sure there isn't really a limit to how many people can be `bcc'ed` on a single email.\nAlso, Google could theoretically shut down API access to GMail and Google Sheets tomorrow, but that seems really, really unlikely.\n\n## blog2newsletter Package\n\nIt's taken longer than I wanted to finish it off, but I think `{blog2newsletter}` is finally ready for primetime (and if you are one of the two subscribers to my blog, then you know it is because you received this post as an email) [@blog2newsletter].\nThe [README](https://rmflight.github.io/blog2newsletter/) of the package goes into great detail of how to set up all the prerequisites and use it.\n\nThe basic workflow, is this:\n\n* have a blog with an RSS feed with full posts included in the RSS (default for `{quarto}` blogs with RSS enabled);\n* have a Google project that you have the secrets for;\n* authorize `{gmailr}` and `{googlesheets4}` to access the Google API for your Google project;\n* have a Google Sheet storing subscriber information from a Google Form (like [this form](https://forms.gle/yEJ8gdzPHLQUmzpdA));\n* create a script that checks for subscribers, gets the post, and composes and sends the email.\n\nThe package doesn't have that many functions, honestly.\nI'm very thankful that `{gmailr}` and `{googlesheets4}` handled all the Google specific stuff, and then `{tidyRSS}` provides all the functionality I needed for taking a blog post and putting it in a format that emails nicely [@tidyrss]!\n\nThe use of `{tidyrss}` also means that you don't have to actually use an R based blogging platform either to use `{blog2newsletter}`!\nYou just need an RSS feed with the full posts in it!\nThat can be a local file in the case of a statically generated blog, or the URL of your RSS feed for something generated / hosted by WordPress, for example.\n\nThe other major consideration was being able to cache a local copy of the subscriber list, as well as what newsletters were previously sent so that you don't accidentally resend the same blog post 20 times.\nWe use simple `rds` files in a cache directory for this.\n\n## Example Script\n\nHere I'm going to break down the example script `_blog2newsletter.R` from the README.\nIn a real directory / project being used to manage this, this is what we would run using `b2n_run()`.\n\nAt the top, we load the needed packages, and set a bunch of variables, including where the Google project secrets are stored, and where `{gargle}` should be putting the oauth tokens, and then loading the authorization tokens:\n\n```r\nlibrary(gmailr)\nlibrary(googlesheets4)\nlibrary(blog2newsletter)\nsecrets_path = \"secrets/client_secret_file_googleusercontent.com.json\"\noauth_cache = \"secrets/gargle_cache/\"\n\n# don't forget to use your actual email\nmy_gmail = \"my-gmail@gmail.com\"\n\noptions(\n  gargle_oauth_cache = oauth_cache,\n  gargle_oauth_email = secrets_path\n)\n\ngm_auth_configure(path  = secrets_path)\ngm_auth(scopes = c(\"compose\", \"send\"), \n        email = my_gmail)\n\ngs4_auth_configure(path = secrets_path)\ngs4_auth(\n  scopes = \"https://www.googleapis.com/auth/spreadsheets.readonly\",\n  email = my_gmail)\n```\n\nThe bottom half starts with setting a variable for the blog directory (for `{quarto}` blogs) or alternatively where to find the RSS file directly.\nThen setting the Google Sheet id and grabbing the subscribers.\nFinally, what should be pre-pended to the email subject before the blog post title.\n\n```r\n# switch from directory, full path to index.xml, or url as needed\nblog_dir = \"blog/directory\"\n\nsubscribers_id = \"your-sheet-id\"\nsubscriber_data = b2n_fetch_subscribers(subscribers_id)\n\n# newsletter subject\nextra_subject = \"my newsletter\"\n\nblog_dir |>\n  b2n_post_to_email() |>\n  b2n_add_subscribers(subscriber_data) |>\n  b2n_from(my_gmail) |>\n  b2n_add_subject(extra_subject) |>\n  b2n_send_newsletter()\n```\n\nIf you want to see what the composed email looks like **before** sending it, then you can use the `b2n_draft_email` instead of `b2n_send_newsletter`, and if you've got the right authorizations setup, then the email will show up in your GMail drafts.\n\n## Semi-Automatic\n\nFinally, something like this would be a pain to type all that out everytime you wanted to send a new newsletter.\nThis is part of the reason the default post to grab is the **latest** post that is available in the RSS feed.\nWith that, it's trivial to have a single script that is run each time you want to send out your latest available blog post.\nTo help with this, there is the `b2n_run` function, that by default looks for `_blog2newsletter.R`, and `source`'s it.\n\nTherefore, you just need a project / directory for the subscription management, with the cache and the above script, and when you have a new blog post up, just do `blog2newsletter::b2n_run()`, and the post will be sent out if there are subscribers with matching categories.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}