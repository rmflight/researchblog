{
  "hash": "5039695d7e2af33df6549ca3e784eee6",
  "result": {
    "markdown": "---\ntitle: \"Writing Papers Using R Markdown\"\nsubtitle: |\n  How I used RMarkdown to write a manuscript\ndate: 2012-10-09\ncategories: [R, open-science, reproducibility, literate-programming, rmarkdown]\n---\n\n\n\n\n\n\nI have been watching the activity in [`RStudio`](http://rstudio.org) and [`knitr`](http://yihui.name/knitr/) for a while, and\nhave even been using `Rmd` (R markdown) files in my own work as a way to easily provide commentary on an actual dataset\nanalysis. Yihui has proposed [writing papers](http://yihui.name/en/2012/03/a-really-fast-statistics-journal/) in markdown and posting them to a blog as a way to host a statistics journal, and lots of people are now using `knitr` as a way\nto create reproducible blog posts that include code (including yours truly).\n\nThe idea of writing a paper that actually includes the necessary code to perform the analysis, and is actually readable\nin its raw form, and that someone else could actually run was pretty appealing. Unfortunately, I had not had the time\nor opportunity to actually try it, until recently our group submitted a conference paper that included a lot of analysis in `R` that seemed like the perfect opportunity to try this. \n(I will link to the paper here when I hear more, or get clearance from my PI). Originally we wrote the paper in Microsoft(r) Word, but after submission I decided to see what it would have taken to write it as an `Rmd` document that could\nthen generate `markdown` or `html`.\n\nIt turned out that it was not that hard, but it did force me to do some things differently. This is what I want to \ndiscuss here.\n\n## Advantages\n\nI actually found it much easier to have the text with the analysis (in contrast to having to be separate in a Word \ndocument), and upon doing the conversion, discovered some possible numerical errors that crept in because of having\nto copy numerical results separately (that is the nice thing about being able to insert variable directly into the text). \nIn addition, the Word template for the submission didn't play nice with automatic table and figure numbering, so our\ntable and figure numbering got messed up in the submission. So overall, I'd say it worked out better with the `Rmd` file\noverall, even with the having to create functions to handle table and figure numbering properly myself (see below).\n\n## Tables and Figures\n\nAs I'm sure most of you know, Word (and other WYSIWYG editors) have ability to keep track of your object numbers, this\nis especially nice for keeping your figure and table numbers straight. Of course, there is no such ability built into\na static text file, but I found it was easy to write a couple of functions for this. The way I came up with is to have\na variable that contains a label for the figure or table, a function that increments the counter when new figures or \ntables are added, and a function that prints the associated number for a particular label. This does require a bit of \nforethought on the part of the writer, because you may have to add a table or figure label to the variable long before\nyou actually create it, but as long as you use sane (i.e. descriptive) labels, it shouldn't be a big deal. Let me show\nyou what I mean.\n\n### Counting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincCount <- function(inObj, useName){\n\tnObj <- length(inObj)\n\tuseNum <- max(inObj) + 1\n\tinObj <- c(inObj, useNum)\n\tnames(inObj)[nObj+1] <- useName\n\tinObj\n}\nfigCount <- c(\"_\"=0)\ntableCount <- c(\"_\"=0)\n```\n:::\n\n\nThe `incCount` function is very simple, it takes an object, checks the maximum count, and then adds an incremental value\nwith the supplied name. In this example, I initialized the `figCount` and `tableCount` objects with a non-sensical named\nvalue of zero. \n\nNow in the process of writing, I decide I'm going to need a table on the amount of time spent by post-docs writing blog\nposts in different years of their post-doc training. Lets call this `t.blogPostDocs`. Notice that this is a fairly \ndescriptive name. We can assign it a number like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntableCount <- incCount(tableCount, \"t.blogPostDocs\")\ntableCount\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             _ t.blogPostDocs \n             0              1 \n```\n:::\n:::\n\n\n### Inserting\n\nSo now we have a variable with a named number we can refer to. But how do we insert it into the text? We are going to\nuse another function that will let us insert either the text with a link, or just the text itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npasteLabel <- function(preText, inObj, objName, insLink=TRUE){\n\tobjNum <- inObj[objName]\n\t\n\tuseText <- paste(preText, objNum, sep=\" \")\n\tif (insLink){\n\t\tuseText <- paste(\"[\", useText, \"](#\", objName, \")\", sep=\"\")\n\t}\n\tuseText\n}\n```\n:::\n\n\nThis function allows us to insert the table number like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr I(pasteLabel(\"Table\", tableCount, \"t.blogPostDocs\"))\n```\n:::\n\n\nThis would be inserted into a normal `inline` code block. The `I` makes sure that the text will appear as normal text,\nand not get formatted as a code block. The default behavior is to insert as a relative link, thereby enabling the use\nof relative links to link where a table / figure is mentioned to its actual location. For example, we can insert the \nanchor link like so:\n\n```\n<a id=\"t.blogPostDocs\"></a>\n```\n\n### Markdown Tables\n\nFollowed by the actual table text. This brings up the subject of `markdown` tables. I also wrote a function (thanks to\nYihui again) that transforms a normal `R` `data.frame` to a `markdown` table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntableCat <- function(inFrame){\n\toutText <- paste(names(inFrame), collapse=\" | \")\n\toutText <- c(outText, paste(rep(\"---\", ncol(inFrame)), collapse=\" | \"))\n\tinvisible(apply(inFrame, 1, function(inRow){\n\t\toutText <<- c(outText, paste(inRow, collapse=\" | \"))\n\t}))\n\treturn(outText)\n}\n```\n:::\n\n\nLets see it in action.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostDocBlogs <- data.frame(PD=c(\"p1\", \"p2\", \"p3\"), NBlog=c(4, 10, 2), Year=c(1, 4, 2))\npostDocBlogs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PD NBlog Year\n1 p1     4    1\n2 p2    10    4\n3 p3     2    2\n```\n:::\n\n```{.r .cell-code}\npostDocInsert <- tableCat(postDocBlogs)\npostDocInsert\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PD | NBlog | Year\" \"--- | --- | ---\"   \"p1 |  4 | 1\"      \n[4] \"p2 | 10 | 4\"       \"p3 |  2 | 2\"      \n```\n:::\n:::\n\n\nTo actually insert it into the text, use a code chunk with `results='asis'` and `echo=FALSE`. \n\n\n\n```{.r .cell-code}\ncat(postDocInsert, sep=\"\\n\")\n```\n\nPD | NBlog | Year\n--- | --- | ---\np1 |  4 | 1\np2 | 10 | 4\np3 |  2 | 2\n\n\nBefore inserting the table though, you might want an inline code with the table number and caption, like this:\n\n`I(pasteLabel(\"Table\", tableCount, \"t.blogPostDocs\", FALSE))` This is the number of blog posts and year of training for post-docs.\n\nTable 1 This is the number of blog posts and year of training for post-docs.\n\nRemember for captions to set the `insLink` variable to `FALSE` so that you don't generate a link from the caption.\n\n### Figures\n\nOftentimes, you will have code that generates the figure, and then you want to insert the figure at a different point.\nThis is accomplished by the judicious use of `echo` and `include` chunk options.\n\nFor example, we can create a `ggplot2` figure and store it in a variable in one chunk, and then `print` it in a later\nchunk to actually insert it into the text body.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotData <- data.frame(x=rnorm(1000, 1, 5), y=rnorm(1000, 0, 2))\nplotKeep <- ggplot(plotData, aes(x=x, y=y)) + geom_point()\nfigCounts <- incCount(figCount, \"f.randomFigure\")\n```\n:::\n\n\nAnd now we decide to actually insert it using `print(plotKeep)` with the option of `echo=FALSE`:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figureInsert-1.png){width=672}\n:::\n:::\n\n\n**[Figure 1](#f.randomFigure). A random figure.**\n\n## Numerical result formatting\n\nWhen `R` prints a number, it normally likes to do so with lots of digits. This is not probably what you want either in\na table or when reporting a number in a sentence. You can control that by using the `format` function. When generating\na new variable, the number of digits to display when printing will be saved, and when used on a variable directly,\nonly the defined number of digits will display.\n\n## Echo and Include\n\nThis brings up the issue of how to keep the code from appearing in the text body. I found depending on the particulars,\neither using `echo=FALSE` or `include=FALSE` would do the job. This is meant to be a paper, a reproducible one, but a \npaper nonetheless, and therefore the code should not end up in the text body. \n\n## References\n\nOne thing I haven't done yet is convert all the references. I am planning to try using the [knitcitations](https://github.com/cboettig/knitcitations/) package. I will probably post on that experience.\n\n## HTML generation\n\nBecause I use `RStudio`, I set up a modified function For generating a full `html` version of the paper, changing the \ndefault `RStudio` `markdown` render options like so:\n\n```\nhtmlOptions <- markdownHTMLOptions(defaults=TRUE)\nhtmlOptions <- htmlOptions[htmlOptions != \"hard_wrap\"]\nmarkdownToHTML(inputFile, outputFile, options = htmlOptions)\n```\n\nThis should be added to a `.Rprofile` file either in your `home` directory or in the directory you start `R` in (this\nis especially useful for modification on a per project basis).\n\nI do this because when I write my documents, I want the source to be readable online. If this is a `github` hosted repo,\nthat means being displayed in the `github` file browser, which does not do line wrapping. So I set up a 120 character\nline in my editor, and try very hard to stick to that. \n\n\n## Function source\n\nYou can find the previously mentioned functions in a github gist [here](https://gist.github.com/3858973).\n\n## Post source\n\nThe source files for this blog post can be found at: [`Rmd`](https://github.com/rmflight/blogPosts/blob/master/papersinRmd.Rmd), [`md`](https://github.com/rmflight/blogPosts/blob/master/papersinRmd.md), and [`html`](https://github.com/rmflight/blogPosts/blob/master/papersinRmd.html).\n\nPosted on October 9, 2012, at http://robertmflight.blogspot.com/2012/10/writing-papers-using-r-markdown.html\n\nEdit: added section on formatting numerical results\n\nEdit: added session info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Pop!_OS 22.04 LTS\n\nMatrix products: default\nBLAS:   /rmflight_stuff/software/R-4.2.1/lib/libRblas.so\nLAPACK: /rmflight_stuff/software/R-4.2.1/lib/libRlapack.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] ggplot2_3.3.6\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.1    pillar_1.8.1      tools_4.2.1       digest_0.6.29    \n [5] jsonlite_1.8.0    evaluate_0.16     lifecycle_1.0.2   tibble_3.1.8     \n [9] gtable_0.3.1      pkgconfig_2.0.3   rlang_1.0.5       DBI_1.1.3        \n[13] cli_3.4.0         rstudioapi_0.14   yaml_2.3.5        xfun_0.33        \n[17] fastmap_1.1.0     withr_2.5.0       stringr_1.4.1     dplyr_1.0.10     \n[21] knitr_1.40        generics_0.1.3    htmlwidgets_1.5.4 vctrs_0.4.1      \n[25] grid_4.2.1        tidyselect_1.1.2  glue_1.6.2        R6_2.5.1         \n[29] fansi_1.0.3       rmarkdown_2.16    farver_2.1.1      purrr_0.3.4      \n[33] magrittr_2.0.3    scales_1.2.1      htmltools_0.5.3   assertthat_0.2.1 \n[37] colorspace_2.0-3  renv_0.15.5       labeling_0.4.2    utf8_1.2.2       \n[41] stringi_1.7.8     munsell_0.5.0    \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}