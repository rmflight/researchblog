{
  "hash": "c82fca1d57d88313806acfb5e2463cf1",
  "result": {
    "markdown": "---\ntitle: \"targets and Safe Functions\"\nsubtitle: |\n  How to make sure {targets} recognizes changes to a 'safe' function?\ndate: 2023-05-08\ncategories: [R, targets, workflow, purrr]\neditor_options:\n  chunk_output_type: console\nbibliography: refs.bib\n---\n\n\n## TL;DR\n\nIf you are using the `{targets}` workflow manager for your analyses, and also using `{purrr::safely}` (or others) to control possible errors, do not do the simplest version of function replacement to make your function `safe`.\nSee [here](#changing-the-referenced-function) for the final versions.\n\n## targets\n\nA bit of an introduction, `{targets}` is a workflow manager written and managed completely in `R` [@wlandautargets].\nIt is the second workfow manager written by the amazing William Landau.\nIt keeps track of all the interdependencies amongst function inputs and outputs, files, etc, for you, and only reruns things that need to be rerun.\nThis makes it easier to modularize a script into separate functions, and not worry about the order that things get run in, or which bits need to be rerun when you change things without rerunning the entire script.\n\nIf you are familiar with `{knitr}` cache'ing, it's somewhat like that, but very beefed up, and not dependent on the document at all.\nAlso, in my opinion, much smarter than `{knitr}` caches [@yihuicache].\n\n## safely?\n\nOutside of iterations, another subset of functionality in `{purrr}` are various adverbs, or functions that modify the effect of another function [@hadleypurrr].\nOne of these is `safely`.\nFrom the help page:\n\n> Creates a modified version of .f that always succeeds. It returns a list with components result and error. If the function succeeds, result contains the returned value and error is NULL. If an error occurred, error is an error object and result is either NULL or otherwise.\n\nAs you can imagine, this is incredibly useful for handling error conditions without explicitly handling it within your own function.\nBy the way, it is worth looking at the help page for `{purrr::safely}` just to see all the adverbs that `{purrr}` provides, some may be useful for you in other contexts.\n\n## The Issue\n\nSo, what happens if you try to use `{purrr::safely}` to modify a user defined function from within a `{targets}` workflow?\nIt turns out, you have to be very careful **how** you incorporate `{purrr::safely}` into your workflow.\nIf you do it wrong, then `{targets}` can't tell you changed the underlying function, and won't rerun the workflow.\nI do want to thank Neil Wright for bringing this up on Mastodon, as it's not obvious what the best solution is or **why** this happens [@neilpost].\nI also note that Neil does post the solution in their next post.\n\n## Setup\n\nSo this post assumes you have a recent version of `{targets}` installed (I'm using 1.0.0) as well as `{purrr}` (using 1.0.1).\nWe are not going to setup a full `{targets}` workflow, but will use the functions `tar_deparse_safe` and `digest_obj64` (internal to `{targets}`), as that will illuminate the issues for us.\n\n## Initial Functions\n\nSo we need a few functions for this, ideally ones that will generate the same output, but that we can implement in a couple of different ways.\nThanks to the fact that R is a statistical language, we can do that fairly easily.\nFor example, we can make two functions for calculating the mean of a set of values.\nOne doing the actual calculation, and another that simply wraps the built-in `mean` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_by_hand = function(values)\n{\n  return(\n    sum(values) / length(values)\n  )\n}\n\nmean_builtin = function(values)\n{\n  return(\n    mean(values)\n  )\n}\n```\n:::\n\n\nFrom these we can then wrap them in `safely` to make them better able to handle a possible error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsafe_by_hand = purrr::safely(mean_by_hand)\n\nsafe_builtin = purrr::safely(mean_builtin)\n```\n:::\n\n\n## Hashes\n\nNow, for all of these, we can get the object hash that `{targets}` would use to tell when things changed.\n\n\n::: {#tbl-initial-hashes .cell tbl-cap='Initial hashes of the various functions.'}\n\n```{.r .cell-code}\nhash_values = purrr::map(c(\"by-hand\" = mean_by_hand,\n                           \"built-in\" = mean_builtin,\n                           \"safe-by-hand\" = safe_by_hand,\n                           \"safe-built-in\" = safe_builtin),\n                         function(.x){\n                           targets:::tar_deparse_safe(.x) |> targets:::digest_chr64()\n                         })\nhash_table = tibble::as_tibble_row(hash_values) |>\n  tidyr::pivot_longer(cols = tidyselect::everything(), names_to = \"which\", values_to = \"hash\")\ngt::gt(hash_table)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"toanicdput\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#toanicdput table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#toanicdput thead, #toanicdput tbody, #toanicdput tfoot, #toanicdput tr, #toanicdput td, #toanicdput th {\n  border-style: none;\n}\n\n#toanicdput p {\n  margin: 0;\n  padding: 0;\n}\n\n#toanicdput .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#toanicdput .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#toanicdput .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#toanicdput .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#toanicdput .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#toanicdput .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#toanicdput .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#toanicdput .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#toanicdput .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#toanicdput .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#toanicdput .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#toanicdput .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#toanicdput .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#toanicdput .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#toanicdput .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#toanicdput .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#toanicdput .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#toanicdput .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#toanicdput .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#toanicdput .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#toanicdput .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#toanicdput .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#toanicdput .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#toanicdput .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#toanicdput .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#toanicdput .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#toanicdput .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#toanicdput .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#toanicdput .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#toanicdput .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#toanicdput .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#toanicdput .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#toanicdput .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#toanicdput .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#toanicdput .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#toanicdput .gt_left {\n  text-align: left;\n}\n\n#toanicdput .gt_center {\n  text-align: center;\n}\n\n#toanicdput .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#toanicdput .gt_font_normal {\n  font-weight: normal;\n}\n\n#toanicdput .gt_font_bold {\n  font-weight: bold;\n}\n\n#toanicdput .gt_font_italic {\n  font-style: italic;\n}\n\n#toanicdput .gt_super {\n  font-size: 65%;\n}\n\n#toanicdput .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#toanicdput .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#toanicdput .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#toanicdput .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#toanicdput .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#toanicdput .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#toanicdput .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"which\">which</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"hash\">hash</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">by-hand</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">b3f5384d3554e21a</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">built-in</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">35321f32205c905b</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-by-hand</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">00758262fad8ce25</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-built-in</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">00758262fad8ce25</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nAs we can see from @tbl-initial-hashes, the two `safe` variants have **identical** hashes.\nIf you look at the help page for `tar_cue`, you might see why:\n\n>User-defined functions are hashed in the following way:\n>\n>1. Deparse the function with **targets:::tar_deparse_safe().** This function computes a string representation of the function body and arguments. This string representation is invariant to changes in comments and whitespace, which means trivial changes to formatting do not cue targets to rerun.\n>\n>2. Manually remove any literal pointers from the function string using targets:::mask_pointers(). Such pointers arise from inline compiled C/C++ functions.\n>\n>3. Using static code analysis (i.e. tar_deps(), which is based on codetools::findGlobals()) identify any user-defined functions and global objects that the current function depends on. Append the hashes of those dependencies to the string representation of the current function.\n>\n>4. Compute the hash of the final string representation using **targets:::digest_chr64()**.\n\nSee that bit about **deparsing** the function in step 1.\nWhat does that look like for the `safe` versions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets:::tar_deparse_safe(safe_by_hand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"function (...) \\ncapture_error(.f(...), otherwise, quiet)\"\n```\n:::\n\n```{.r .cell-code}\ntargets:::tar_deparse_safe(safe_builtin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"function (...) \\ncapture_error(.f(...), otherwise, quiet)\"\n```\n:::\n:::\n\n\nThey have the same output!\nNow, I understand why the functions should look this way due to how they work, and I also understand why Will implemented the hashing of user defined functions this way as well.\nHowever, for our purposes, it makes things a teensy bit harder.\n\n## Better Functions\n\nIf we still want to use the magic of `safely` (and any likely some of the other `{purrr}` adverbs) while using `{targets}`, then we need to think about this problem a little more.\nOne way to make sure that any changes to the function will be reflected in the hash is to embed the `safely` call **within** the function body.\n\nIn the next two functions, we can see that we've done just that.\nNote that right now, we are concentrating on making functions that do the same thing, in a *safe* way, but their deparsed hash will be different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsafe_by_hand_v2 = function(values)\n{\n  internal_byhand = function(values)\n  {\n    sum(values) / length(values)\n  }\n  safe_internal = purrr::safely(internal_byhand)\n  return(\n    safe_internal(values)\n  )\n}\n\nsafe_builtin_v2 = function(values)\n{\n  safe_builtin = purrr::safely(mean)\n  return(\n    safe_builtin(values)\n  )\n}\n```\n:::\n\n\n## More Hashes\n\n\n::: {#tbl-more-hashes .cell tbl-cap='More hashes of the safe variants from the above functions.'}\n\n```{.r .cell-code}\nhash_values2 = purrr::map(c(\"safe-by-hand-v2\" = safe_by_hand_v2,\n                           \"safe-built-in-v2\" = safe_builtin_v2),\n                         function(.x){\n                           targets:::tar_deparse_safe(.x) |> targets:::digest_chr64()\n                         })\nhash_table2 = tibble::as_tibble_row(hash_values2) |>\n  tidyr::pivot_longer(cols = tidyselect::everything(), names_to = \"which\", values_to = \"hash\")\ngt::gt(dplyr::bind_rows(hash_table, hash_table2))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"mdfaqlbccq\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#mdfaqlbccq table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#mdfaqlbccq thead, #mdfaqlbccq tbody, #mdfaqlbccq tfoot, #mdfaqlbccq tr, #mdfaqlbccq td, #mdfaqlbccq th {\n  border-style: none;\n}\n\n#mdfaqlbccq p {\n  margin: 0;\n  padding: 0;\n}\n\n#mdfaqlbccq .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#mdfaqlbccq .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#mdfaqlbccq .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#mdfaqlbccq .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#mdfaqlbccq .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#mdfaqlbccq .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#mdfaqlbccq .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#mdfaqlbccq .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#mdfaqlbccq .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#mdfaqlbccq .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#mdfaqlbccq .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#mdfaqlbccq .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#mdfaqlbccq .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#mdfaqlbccq .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#mdfaqlbccq .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mdfaqlbccq .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#mdfaqlbccq .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#mdfaqlbccq .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#mdfaqlbccq .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mdfaqlbccq .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#mdfaqlbccq .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mdfaqlbccq .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#mdfaqlbccq .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mdfaqlbccq .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mdfaqlbccq .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mdfaqlbccq .gt_left {\n  text-align: left;\n}\n\n#mdfaqlbccq .gt_center {\n  text-align: center;\n}\n\n#mdfaqlbccq .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#mdfaqlbccq .gt_font_normal {\n  font-weight: normal;\n}\n\n#mdfaqlbccq .gt_font_bold {\n  font-weight: bold;\n}\n\n#mdfaqlbccq .gt_font_italic {\n  font-style: italic;\n}\n\n#mdfaqlbccq .gt_super {\n  font-size: 65%;\n}\n\n#mdfaqlbccq .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#mdfaqlbccq .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#mdfaqlbccq .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#mdfaqlbccq .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#mdfaqlbccq .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#mdfaqlbccq .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#mdfaqlbccq .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"which\">which</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"hash\">hash</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">by-hand</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">b3f5384d3554e21a</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">built-in</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">35321f32205c905b</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-by-hand</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">00758262fad8ce25</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-built-in</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">00758262fad8ce25</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-by-hand-v2</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">8259616adc47b8cc</td></tr>\n    <tr><td headers=\"which\" class=\"gt_row gt_left\">safe-built-in-v2</td>\n<td headers=\"hash\" class=\"gt_row gt_left\">b35ae69ffbd4ec65</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nAs shown in @tbl-more-hashes, now we see different hashes, even though our functions are `safe`, and generate the same results, as long as we don't have any overflow or underflow issues.\n\n## Changing the Referenced Function\n\nThe `{targets}` documentation notes that it is also examining the dependent user defined functions and then concatenating the hashes together to check for changes to the overall set of functions being called.\nThis is hard to show here in our simple post, but I've verified that it does indeed work for our specific case [@rmflightdiff].\n\nWe can imagine this pair of functions to make a safe version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_function = function(values)\n{\n  return(\n    mean(values)\n  )\n}\n\nsafe_mean = function(values)\n{\n  safe_version = purrr::safely(mean_function)\n  return(\n    safe_version(values)\n  )\n}\n```\n:::\n\n\nIf we change our `mean_function` to something different, `{targets}` will pick up the changes and change the hash accordingly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_function = function(values)\n{\n  return(\n    sum(values) / length(values)\n  )\n}\n```\n:::\n\n\n## Conclusions\n\nIf you want `{targets}` to pick up on changes to your functions, it helps to understand exactly how `{targets}` is generating hashable representations of your user defined functions, and what gets returned by them.\nThankfully, it does not require much more in terms of [lines of code](#changing-the-referenced-function) to make sure that `{targets}` picks up on your changed function definition.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}