{
  "hash": "34af3537e0866f908b2b41c2c4dab03a",
  "result": {
    "markdown": "---\ntitle: \"Pie Charts in RCy3\"\nsubtitle: |\n  How to represent nodes as pie charts using Cytoscape and RCy3\ndate: 2022-01-06\ncategories: [random-code-snippets, rcy3, cytoscape, R]\nbibliography: refs.bib\n---\n\n\n\nI have a package, `{categoryCompare2}` [@categorycompare2] that I've been working on for a while, and recently wanted to make available on our labs r-universe [@moseleyruniverse].\n\nFor some of the **current** visualization, we use Cytoscape to examine annotation similarity graphs, coupling the R together with Cytoscape via `{RCy3}` [@rcy3].\nIn the previous iteration, we had used actual piechart images generated by R, and then used `setNodeImageDirect` to point the node images to local image files.\n\nHowever, the latest iteration of `{RCy3}` has essentially lost that functionality.\nHowever, there is a new visualization plugin that can do similar things, enhancedGraphics [@enhancedGraphics].\n\nAlexander Pico, one of the primary `{RCy3}` developers, provided me with the guidance for a code solution [@piechartissue], which I've adapted below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrp_matrix = matrix(c(1, 0,\n                      0, 1), nrow = 2, ncol = 2)\nn_grp <- nrow(grp_matrix)\nuse_color <- rainbow_hcl(ncol(grp_matrix), c = 100)\nn_color <- length(use_color)\nuse_color = color\n# defines how many pie segments are needed, common to all the pie-charts\npie_area <- rep(1 / n_color, n_color)\nnames(pie_area) <- rep(\"\", n_color)\n\n\ndesat_color <- desaturate(use_color)\nnames(desat_color) <- names(use_color)\npiechart_strings <- purrr::map_dfr(rownames(grp_matrix), function(i_grp){\n  tmp_logical <- grp_matrix[i_grp, ]\n  tmp_color <- use_color\n    \n  # add the proper desaturated versions of the colors\n  tmp_color[!tmp_logical] <- desat_color[!tmp_logical]\n    \n  out_str = paste0('piechart: attributelist=\"',\n                   paste(colnames(grp_matrix), collapse = ','),\n                   '\" ',\n                   'colorlist=\"',\n                   paste(tmp_color, collapse = ','),\n                   '\" ',\n                   'arcstart=-90 showlabels=false')\n  data.frame(colorlist = out_str)\n})\n\ntmp_matrix = as.data.frame(matrix(1, nrow = nrow(piechart_strings),\n                      ncol = ncol(grp_matrix)))\nnames(tmp_matrix) = colnames(grp_matrix) \npiechart_df = cbind(tmp_matrix, piechart_strings)\n\n# after merging this with the node information to\n# put the right things with the right node\n# this gives **node_vis_df** below\nRCy3::setNodeShapeDefault(\"ELLIPSE\")\nRCy3::setNodeSizeDefault(35)\nRCy3::loadTableData(node_vis_df, data.key.column = \"name\", table = \"node\", table.key.column = \"name\")\nRCy3::updateStyleMapping(\"default\",\n   RCy3::mapVisualProperty(\"NODE_CUSTOMGRAPHICS_1\", \"colorlist\", \"p\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}