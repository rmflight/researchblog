{
  "hash": "8af753b2a83a1ce8225ab9090a557045",
  "result": {
    "markdown": "---\ntitle: \"Nicer PNG Graphics\"\ndate: '2018-12-06'\ncaterogies: [R, graphics, pdf, visualization, png, knitr, rmarkdown]\nsubtitle: |\n  Here are some tips for getting nicer graphics in your rmarkdown outputs.\n---\n\n\n## TL;DR\n\nIf you are getting crappy looking *png* images from `rmarkdown` html or word\ndocuments, try using `type='cairo'` or `dev='CairoPNG'` in your chunk options.\n\n## PNG Graphics??\n\nSo, I write a **lot** of reports using `rmarkdown` and `knitr`, and have been\nusing `knitr` for quite a while. My job involves doing analyses for collaborators\nand communicating results. *Most* of the time, I will generate a pdf report,\nand I get beautiful graphics, thanks to the `eps` graphics device. However,\nthere are times when I want to generate either word or html reports, and\nin those cases, I tend to get very crappy looking graphics. See this example\nimage below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\np = ggplot(mtcars, aes(mpg, wt)) +\n  geom_point(size = 3) +\n  labs(x=\"Fuel efficiency (mpg)\", y=\"Weight (tons)\",\n       title=\"Seminal ggplot2 scatterplot example\",\n       subtitle=\"A plot that is only useful for demonstration purposes\",\n       caption=\"Brought to you by the letter 'g'\")\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first_image-1.png){width=672}\n:::\n:::\n\n\nNote: This was generated on self-compiled R under Ubuntu 16.04. As we can\nsee, `knitr` is using the `png` device, because we are generating html output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$get(\"dev\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"png\"\n```\n:::\n:::\n\n\n## Increased Resolution\n\nOf course, we just need to **increase the resolution**! So let's do so. Just to\ngo whole hog on this, let's increase it to 300!\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + ggtitle(\"Seminal ggplot2 scatterplot example, 300 dpi\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_300-1.png){width=2100}\n:::\n:::\n\n\nIf you compare this one to the previous, you can see that the quality is\n*marginally* better, but doesn't seem to be anything like what you should\nbe able to get.\n\n## Use SVG??\n\nAlternatively, we could tell `knitr` to use the `svg` device instead! Vector\ngraphics always look nice!\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + ggtitle(\"Seminal ggplot2 scatterplot example, dev = 'svg'\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_svg-1.svg){width=672}\n:::\n:::\n\n\nIt's so crisp! But, for word documents especially, this could be a problem,\nas the images might not show up. The nice thing about *png* is it should be\nusable in just about any format!\n\nAnd, if you have a plot with a *lot* of points (> 200), the *svg* will start to\ntake up some serious disk space, as every single point is encoded in the *svg* file.\nThis is also a good reason to use *png*.\n\n## PNG via Cairo\n\nAfter pulling out my hair yesterday as I tried to generate nice *png* images embedded\nin a word report (and settling on converting every figure from svg to png and saving\nto a folder to pass on, see [this](https://gist.github.com/rmflight/bb61ad1fd8ba6e44f734#make-png-of-high-density-svgs)),\nI finally decided to try a different device.\n\nNow, your R installation does need to have either `cairo` capabilities, or be able\nto use the `Cairo` package. Mine has both.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncapabilities()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       jpeg         png        tiff       tcltk         X11        aqua \n       TRUE        TRUE        TRUE        TRUE        TRUE       FALSE \n   http/ftp     sockets      libxml        fifo      cledit       iconv \n       TRUE        TRUE       FALSE        TRUE       FALSE        TRUE \n        NLS       Rprof     profmem       cairo         ICU long.double \n       TRUE        TRUE       FALSE        TRUE        TRUE        TRUE \n    libcurl \n       TRUE \n```\n:::\n\n```{.r .cell-code}\npackageVersion(\"Cairo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '1.6.0'\n```\n:::\n:::\n\n\nLet's change the device (two different ways) and plot it again. First, we will\nstill use the `png` device, but add the `type = \"cairo\"` argument (see `?png`). Just for information,\nthat looks like the below in the chunk options:\n\n```\nr plot_cairo, dev.args = list(type = \"cairo\")\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + ggtitle(\"Seminal ggplot2 scatterplot example, type = 'cairo'\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_cairo-1.png){width=672}\n:::\n:::\n\n\nWow! This looks great! So much nicer than the other device. Secondly, let's use\nthe `CairoPNG` device (`dev = \"CairoPNG\"`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + ggtitle(\"Seminal ggplot2 scatterplot example, dev = 'CairoPNG'\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_cairopng-1.png){width=672}\n:::\n:::\n\n\nFinally, we can also increase the resolution as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + ggtitle(\"Seminal ggplot2 scatterplot example, dev = 'CairoPNG', dpi = 300\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_cairopng_300-1.png){width=2100}\n:::\n:::\n\n\nSo there you have it. Very crisp *png* images, with higher resolutions if needed,\nand no jaggedness, without resorting to conversion via `inkscape` (my previous go to).\n\n## Incorporating Into Reports\n\nAs I previously mentioned, I often default to pdf reports, but will then generate\na word or html report if necessary. How do you avoid changing the options even\nin a setup chunk if you want this to happen every time you specify `word_document`\nas the output type? This is what I settled on, the setup chunk checks the output type\n(based on being called from `rmarkdown::render`), and sets it appropriately.\n\n```r\nif (knitr::opts_knit$get(\"rmarkdown.pandoc.to\") != \"latex\") {\n  knitr::opts_chunk$set(dpi = 300, dev.args = list(type = \"cairo\"))\n})\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}